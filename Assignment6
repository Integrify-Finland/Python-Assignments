{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "77039ac9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_prime(n: int):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    for i in range(2, int(n ** 0.5) + 1):\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e886aece",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Your tests should cover various cases such as:\n",
    "\n",
    "#Test for negative numbers\n",
    "#Test for 0 and 1\n",
    "#Test for small prime numbers (e.g., 2, 3, 5, 7)\n",
    "#Test for small composite numbers (e.g., 4, 6, 8, 9)\n",
    "#Test for large prime numbers (e.g., 103, 107, 109)\n",
    "#Test for large composite numbers (e.g., 100, 200, 300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0db1ca0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_prime (__main__.TestIsPrime) ... ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 0.004s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x22124302590>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import unittest\n",
    "\n",
    "class TestIsPrime(unittest.TestCase):\n",
    "\n",
    "    def test_prime(self):\n",
    "        message = \"The function fails to tell whether this number is a prime number.\"\n",
    "        self.assertFalse(is_prime(-1), message)\n",
    "        self.assertFalse(is_prime(0), message)\n",
    "        self.assertFalse(is_prime(1), message)\n",
    "        self.assertTrue(is_prime(2), message)\n",
    "        self.assertTrue(is_prime(3), message)\n",
    "        self.assertTrue(is_prime(5), message)\n",
    "        self.assertFalse(is_prime(4), message)\n",
    "        self.assertFalse(is_prime(8), message)\n",
    "        self.assertTrue(is_prime(107), message)\n",
    "        self.assertFalse(is_prime(300), message)\n",
    "        \n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a852544",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
