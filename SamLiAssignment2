{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2a30320",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python Basics: Flow Control, Loops, Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "52f21071",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "radius of a circle : ewe\n",
      "Calculate area(a) or perimeter(p)we\n",
      "Please choose between 'a' and 'p'\n"
     ]
    }
   ],
   "source": [
    "import math as m\n",
    "radius = input(\"radius of a circle : \")\n",
    "calculation = input(\"Calculate area(a) or perimeter(p)\").lower()\n",
    "#\n",
    "if calculation == 'a':\n",
    "    try:\n",
    "        radius = float(radius)\n",
    "        area = m.pi*radius*radius\n",
    "        print(f'area : {area}')\n",
    "    except ValueError:\n",
    "        print(\"Could not convert data to a float.\")\n",
    "elif calculation == 'p':\n",
    "    try:\n",
    "        radius = float(radius)\n",
    "        perimeter = 2*m.pi*radius\n",
    "        print(f'perimeter : {perimeter}')\n",
    "    except ValueError:\n",
    "        print(\"Could not convert data to a float.\")\n",
    "else:\n",
    "    print(\"Please choose between 'a' and 'p'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "0563fd6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Duy': ['Python', 'Database', 'ML'], 'Laxmi': ['Python', 'Database', 'ML'], 'Antonio': ['Python', 'Database', 'ML'], 'Maria': ['Python', 'Database']}\n"
     ]
    }
   ],
   "source": [
    "students_profile = {\n",
    "    'Duy': ['Python', 'Database', 'ML'], \n",
    "    'Laxmi': ['Python', 'Database', 'ML'],\n",
    "    'Antonio': ['Python', 'Database', 'ML'],\n",
    "    'Maria': ['Python', 'Database', 'ML']}\n",
    "\n",
    "condition = 'Maria' in students_profile\n",
    "if condition == True:\n",
    "    students_profile2 = {'Maria': ['Python', 'Database']}\n",
    "    students_profile.update(students_profile2)\n",
    "    print(students_profile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3990fb2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Take the input from the user as a substring. \n",
    "#If that substring is present in string then display substring is present otherwise substring is not present"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "3649cc96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['This', 'is', 'a', 'good', 'day.', 'Welcome', 'to', 'join', 'us.']\n",
      "Your string: is a this This day\n",
      "['is', 'a', 'this', 'This', 'day']\n",
      "\"This\" is present.\n",
      "\"is\" is present.\n",
      "\"a\" is present.\n"
     ]
    }
   ],
   "source": [
    "strings = \"This is a good day. Welcome to join us.\"\n",
    "parsed_strings = strings.split()\n",
    "print(parsed_strings)\n",
    "substrings = input('Your string: ')\n",
    "parsed_substrings = substrings.split()\n",
    "print(parsed_substrings)\n",
    "\n",
    "for string in parsed_strings: \n",
    "    for substring in parsed_substrings:\n",
    "        if substring == string:\n",
    "            print(f'\"{substring}\" is present.')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18a4b462",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Distance Metrics are important to calculate the similarity between the vectors. They are used in both supervised and unsupervised machine learning problems. \n",
    "#Given the points (1,2,3) and (4,5,6), write a python conditional statement to print the distance for the order 1,2,3,4. \n",
    "#If the order is 1 then it is L1 norm(Manhattan distance), order 2 is L2 norm(Euclidean distance) and the generalized distance is given by Minkowski equation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0effeb78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 x 3 = 36\n",
      "12 x 4 = 48\n",
      "12 x 5 = 60\n",
      "12 x 6 = 72\n"
     ]
    }
   ],
   "source": [
    "def multiplication(n, m, num):\n",
    "    for i in range(n, m):\n",
    "        print(num, 'x', i, '=', num*i)\n",
    "\n",
    "multiplication(3,7,12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "985020de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TTAGGCTTTTAAGCCCTTAAAAGCGCA\n"
     ]
    }
   ],
   "source": [
    "dna_template='AATCCGAAAATTCGGGAATTTTCGCGT'\n",
    "mapper={\"T\":\"A\",\"A\":\"T\",\"G\":\"C\",\"C\":\"G\"}\n",
    "\n",
    "complementary_dna_template =\"\"\n",
    "\n",
    "for item in dna_template:\n",
    "    complementary_dna_template += mapper.get(item) \n",
    "\n",
    "print(complementary_dna_template)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "e3ca9d71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n"
     ]
    }
   ],
   "source": [
    "#f_series=x=[0,1,1,2,3,5,8,13,21,34,55,89,144]\n",
    "\n",
    "f_series =[]\n",
    "def fibonacci_series(n, m):\n",
    "    for i in range(n, m): \n",
    "        if n == 0:\n",
    "            f_series.append(0)\n",
    "            n +=1\n",
    "        if n == 1:\n",
    "            f_series.append(1)\n",
    "            n +=1\n",
    "        if n >= 2:\n",
    "            f_series.append(f_series[n-1]+f_series[n-2])\n",
    "            n +=1\n",
    "    print(f_series)      \n",
    "    \n",
    "fibonacci_series(0, 14) \n",
    "\n",
    "#x[0]=0,x[1]=1, and x[n]=x[n-1]+x[n-2] for n>1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ce2d628",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate a list of n numbers of prime numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "3543d8d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37, 41, 43, 47, 49, 53, 55, 59, 61, 65, 67, 71, 73, 77, 79, 83, 85, 89, 91, 95, 97, 101, 103, 107, 109]\n"
     ]
    }
   ],
   "source": [
    "p_series = [2,3]\n",
    "\n",
    "def prime_series(m):\n",
    "        for i in range(1, m): \n",
    "            p_series.append(6*i-1)\n",
    "            p_series.append(6*i+1)\n",
    "            i +=1\n",
    "        print(p_series)      \n",
    "    \n",
    "prime_series(19) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a5398ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Perform the minmax normalization to the range [0,1] for the data1 and minmax normalization to the range [-1,1] for the data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "5f0c23ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92\n",
      "1\n",
      "[0.0, 0.18, 0.12, 0.15, 0.32, 0.65, 0.52, 0.55, 0.97, 1.0, 0.58, 0.08]\n"
     ]
    }
   ],
   "source": [
    "data1=[1,17,12,15,30,60,48,51,89,92,54,8]\n",
    "\n",
    "print(max(data1))\n",
    "print(min(data1))\n",
    "\n",
    "norm_data1 = []\n",
    "\n",
    "for item in data1:\n",
    "    norm_data1.append(round((item-min(data1))/(max(data1)-min(data1)),2))\n",
    "print(norm_data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "0f017c12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22\n",
      "-32\n",
      "[-0.3, 0.26, 0.15, 0.44, 1.0, -1.0, 0.37, 0.74, -0.15, 0.67, 0.3, 0.11]\n"
     ]
    }
   ],
   "source": [
    "data2=[-13,2,-1,7,22,-32,5,15,-9,13,3,-2]\n",
    "\n",
    "print(max(data2))\n",
    "print(min(data2))\n",
    "\n",
    "norm_data2 = []\n",
    "                         #2 * (X - X_min) / (X_max - X_min) - 1\n",
    "for item in data2:\n",
    "    norm_data2.append(round(2*((item-min(data2))/(max(data2)-min(data2)))-1,2))\n",
    "print(norm_data2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f3b2f98",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Understand how sorting algorithms work(bubble,selection,insertion). Implement them of your own. Also compare time complexities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "b38d4655",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "runtime: 0.00004450\n",
      "[11, 12, 22, 25, 34, 64, 90]\n",
      "Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. \n"
     ]
    }
   ],
   "source": [
    "#  Bubble Sort\n",
    "import timeit\n",
    "\n",
    "def bubbleSort(arr):\n",
    "    \n",
    "    \"\"\"Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. \"\"\"\n",
    "    \n",
    "    n = len(arr)\n",
    "\n",
    "    swapped = False\n",
    "\n",
    "    for i in range(n-1):\n",
    "\n",
    "        for j in range(0, n-i-1):\n",
    "\n",
    "            if arr[j] > arr[j + 1]:\n",
    "                swapped = True\n",
    "                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "\n",
    "        if not swapped:\n",
    "\n",
    "            return\n",
    "\n",
    "arr = [64, 34, 25, 12, 22, 11, 90]\n",
    "\n",
    "start = timeit.default_timer()\n",
    "bubbleSort(arr)\n",
    "end = timeit.default_timer()\n",
    "\n",
    "print(f'runtime: {end-start:.8f}')\n",
    "\n",
    "print(arr)\n",
    "\n",
    "print(bubbleSort.__doc__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "aad00dcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "runtime: 0.00006400\n",
      "[11, 12, 22, 25, 34, 64, 90]\n",
      "The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning.\n"
     ]
    }
   ],
   "source": [
    "# Selection sort in Python\n",
    "\n",
    "def selectionSort(array, size):\n",
    "    \"\"\"The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning.\"\"\"\n",
    "\n",
    "    for i in range(size):\n",
    "        min_index = i\n",
    "\n",
    "        for j in range(i + 1, size):\n",
    "            \n",
    "            if array[j] < array[min_index]:\n",
    "                min_index = j\n",
    "        \n",
    "        (array[i], array[min_index]) = (array[min_index], array[i])\n",
    "\n",
    "arr = [64, 34, 25, 12, 22, 11, 90]\n",
    "size = len(arr)\n",
    "\n",
    "start = timeit.default_timer()\n",
    "selectionSort(arr, size)\n",
    "end = timeit.default_timer()\n",
    "\n",
    "print(f'runtime: {end-start:.8f}')\n",
    "\n",
    "print(arr)\n",
    "\n",
    "print(selectionSort.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "00778c37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11, 12, 22, 25, 34, 64, 90]\n",
      "runtime: 0.00013220\n",
      "Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands.\n"
     ]
    }
   ],
   "source": [
    "# Insertion Sort\n",
    "\n",
    "def insertionSort(arr):\n",
    "\n",
    "    \"\"\"Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands.\"\"\"\n",
    "    \n",
    "    if (n := len(arr)) <= 1:\n",
    "        return\n",
    "    for i in range(1, n):\n",
    "\n",
    "        key = arr[i]\n",
    "\n",
    "        j = i-1\n",
    "        while j >=0 and key < arr[j] :\n",
    "                arr[j+1] = arr[j]\n",
    "                j -= 1\n",
    "        arr[j+1] = key\n",
    "\n",
    "\n",
    "arr = [64, 34, 25, 12, 22, 11, 90]\n",
    "start = timeit.default_timer()\n",
    "insertionSort(arr)\n",
    "end = timeit.default_timer()\n",
    "\n",
    "print(arr)\n",
    "\n",
    "print(f'runtime: {end-start:.8f}')\n",
    "\n",
    "print(insertionSort.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "687f77d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def square(n):\n",
    "    '''Takes in a number n, returns the square of n'''\n",
    "    return n**2\n",
    "\n",
    "print(square.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f236ff59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "for n in range(4):\n",
    "    print(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c9e2e246",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 * 5 * 4 * 3 * 2 * 1 = 720\n"
     ]
    }
   ],
   "source": [
    "#Write a function factorial of a given number\n",
    "\n",
    "def factorial(x):\n",
    "    if x == 1:\n",
    "        print(x, end = ' = ')\n",
    "        return 1\n",
    "    else:\n",
    "        print(x, '*', end = ' ')\n",
    "        return (x * factorial(x-1))\n",
    "print(factorial(6)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc2da252",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a function that takes two arguments: activation_function name and value that returns the output of specific activation_function. \n",
    "#Implement for sigmoid, binary step function, relu, leaky rely, tanh.\n",
    "#activation_function('sigmoid',0) should return 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "7208f166",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5\n"
     ]
    }
   ],
   "source": [
    "# sigmoid function\n",
    "import math as m\n",
    "def sig(x):\n",
    "    return 1/(1 + m.exp(-x))\n",
    "\n",
    "print(sig(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "ea3a65f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.999999774929676\n"
     ]
    }
   ],
   "source": [
    "# tanh function\n",
    "import math as m\n",
    "def tanh(x):\n",
    "    return (m.exp(x)-m.exp(-x))/(m.exp(x)+m.exp(-x))\n",
    "\n",
    "print(tanh(-8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "0d8e6daa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "#binary step function\n",
    "import math as m\n",
    "def binary_step(x):\n",
    "    if x < 0:\n",
    "        return 0\n",
    "    if x >= 0:\n",
    "        return 1\n",
    "    \n",
    "print(binary_step(9))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "be5c5c8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "#relu function\n",
    "import math as m\n",
    "def relu(x):\n",
    "    if x < 0:\n",
    "        return 0\n",
    "    if x >= 0:\n",
    "        return x\n",
    "    \n",
    "print(relu(-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e42be2dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.01\n"
     ]
    }
   ],
   "source": [
    "#Leaky relu function\n",
    "import math as m\n",
    "def relu(x):\n",
    "    if x < 0:\n",
    "        return 0.01*x\n",
    "    if x >= 0:\n",
    "        return x\n",
    "    \n",
    "print(relu(-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b7d205d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.0\n"
     ]
    }
   ],
   "source": [
    "def factorial(x):\n",
    "    if x == 1:\n",
    "        return 1\n",
    "    else:\n",
    "        return (x * factorial(x-1))\n",
    "\n",
    "def permutation(n, r):\n",
    "    return factorial(n)/factorial(n-r)\n",
    "    \n",
    "print(permutation(4,3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be78a53f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(30240.0, 252.0)\n"
     ]
    }
   ],
   "source": [
    "def factorial(x):\n",
    "    if x == 1:\n",
    "        return 1\n",
    "    else:\n",
    "        return (x * factorial(x-1))\n",
    "\n",
    "def permutation(n, r):\n",
    "    return factorial(n)/factorial(n-r)\n",
    "\n",
    "def combination(n, r):\n",
    "    return factorial(n)/(factorial(r)*factorial(n-r))\n",
    "\n",
    "def function(a = 'both', n=10, r=5):   \n",
    "    \n",
    "    if a == 'p':\n",
    "        return permutation(n, r)\n",
    "    if a == 'c':   \n",
    "        return combination(n, r)\n",
    "    else:\n",
    "        return permutation(n, r), combination(n, r)\n",
    "        \n",
    "\n",
    "print(function('x'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34ddad2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#global"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ebe2034d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 'global x' # x is a global variable as it is in the main body of a file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27179787",
   "metadata": {},
   "outputs": [],
   "source": [
    "#local"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96457c91",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test():\n",
    "    y = 'local y' # y is local to the test function\n",
    "    print(y)      # y lives only in the function\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b2828de",
   "metadata": {},
   "outputs": [],
   "source": [
    "#built in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c87f8ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "m = min([5,1,2,3,4])\n",
    "print(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e55024c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#enclosing variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d8896619",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "outer x\n",
      "inner x\n"
     ]
    }
   ],
   "source": [
    "def outer():\n",
    "    x = 'outer x'  #enclosing variable in function outer() out of function inner()\n",
    "    print(x)\n",
    "    \n",
    "    def inner():\n",
    "        x = 'inner x'\n",
    "        print(x)\n",
    "    inner()\n",
    "        \n",
    "outer()\n",
    "\n",
    "     "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
